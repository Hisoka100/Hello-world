{"ast":null,"code":"var _jsxFileName = \"/home/gich/React/my-app/src/task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]); //Display the add form\n\n  const onClick = () => {\n    !showAddTask ? setShowAddTask(true) : setShowAddTask(false);\n  }; // Add items\n\n\n  const addTask = task => {\n    const id = Math.floor(Math.random() * 10000) + 1;\n    const newTask = {\n      id,\n      ...task\n    };\n    setTasks([...tasks, newTask]);\n  }; // delete enteries on the ui\n\n\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  }; // Set the reminder to true or false\n\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onClick: onClick,\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this) : 'No tasks to show']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"i7v0mB6MuT2fUIZSysjwBXnbRFQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/gich/React/my-app/src/task-tracker/src/App.js"],"names":["useState","Header","Tasks","AddTask","App","showAddTask","setShowAddTask","tasks","setTasks","onClick","addTask","task","id","Math","floor","random","newTask","deleteTask","filter","toggleReminder","map","reminder","length"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC,CAFgB,CAIhB;;AACA,QAAMS,OAAO,GAAG,MAAI;AAClB,KAACJ,WAAD,GAAgBC,cAAc,CAAC,IAAD,CAA9B,GAAuCA,cAAc,CAAC,KAAD,CAArD;AAED,GAHD,CALgB,CAUhB;;;AACA,QAAMI,OAAO,GAAIC,IAAD,IAAU;AACxB,UAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,IAAoC,CAA/C;AACA,UAAMC,OAAO,GAAG;AAACJ,MAAAA,EAAD;AAAK,SAAGD;AAAR,KAAhB;AACAH,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWS,OAAX,CAAD,CAAR;AACD,GAJD,CAXgB,CAgBhB;;;AACA,QAAMC,UAAU,GAAIL,EAAD,IAAM;AACvBJ,IAAAA,QAAQ,CAACD,KAAK,CAACW,MAAN,CAAcP,IAAD,IAASA,IAAI,CAACC,EAAL,KAAWA,EAAjC,CAAD,CAAR;AACD,GAFD,CAjBgB,CAqBhB;;;AACA,QAAMO,cAAc,GAAIP,EAAD,IAAO;AAC5BJ,IAAAA,QAAQ,CACRD,KAAK,CAACa,GAAN,CAAWT,IAAD,IACVA,IAAI,CAACC,EAAL,KAAYA,EAAZ,GAAiB,EAAC,GAAGD,IAAJ;AAAUU,MAAAA,QAAQ,EAAC,CAACV,IAAI,CAACU;AAAzB,KAAjB,GACEV,IAFF,CADQ,CAAR;AAKD,GAND;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAIF,OAAnB;AAA4B,MAAA,OAAO,EAAIJ;AAAvC;AAAA;AAAA;AAAA;AAAA,YADF,EAEGA,WAAW,iBAAI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAIK;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFlB,EAGGH,KAAK,CAACe,MAAN,GAAe,CAAf,gBACD,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEf,KAAd;AACO,MAAA,QAAQ,EAAIU,UADnB;AAEO,MAAA,QAAQ,EAAIE;AAFnB;AAAA;AAAA;AAAA;AAAA,YADC,GAIG,kBAPN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA3CD;;GAAMf,G;;KAAAA,G;AA6CN,eAAeA,GAAf","sourcesContent":["import {useState} from 'react'\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\n\n\nconst App = () => {\n  const [showAddTask, setShowAddTask] = useState(false)\n  const [tasks, setTasks] = useState([ ])     \n\n  //Display the add form\n  const onClick = ()=>{\n    !showAddTask ?  setShowAddTask(true) : setShowAddTask(false)\n\n  }\n\n  // Add items\n  const addTask = (task) => {\n    const id = Math.floor(Math.random() * 10000) + 1\n    const newTask = {id, ...task}\n    setTasks([...tasks, newTask])\n  }\n  // delete enteries on the ui\n  const deleteTask = (id)=>{\n    setTasks(tasks.filter((task)=> task.id !==id))\n  }\n\n  // Set the reminder to true or false\n  const toggleReminder = (id) =>{\n    setTasks(\n    tasks.map((task) => \n    task.id === id ? {...task, reminder:!task.reminder} \n    : task)\n    )\n  }\n  \n\n  return (\n    <div className=\"container\">\n      <Header onClick = {onClick} showAdd = {showAddTask}/>\n      {showAddTask && <AddTask onAdd = {addTask}/>}\n      {tasks.length > 0 ? (\n      <Tasks tasks={tasks}\n             onDelete = {deleteTask}\n             onToggle = {toggleReminder}/>)\n       : ('No tasks to show')\n      }\n    </div>\n  );\n}\n\nexport default App\n\n"]},"metadata":{},"sourceType":"module"}