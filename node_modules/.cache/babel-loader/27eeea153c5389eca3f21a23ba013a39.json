{"ast":null,"code":"var _jsxFileName = \"/home/gich/React/my-app/src/task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const taskFromServer = await fetchTasks();\n      setTasks(taskFromServer);\n    };\n\n    getTasks();\n  }, []); //Fetch tasks\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  }; //Fetch tasks\n\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  }; //Display the add form\n\n\n  const onClick = () => {\n    !showAddTask ? setShowAddTask(true) : setShowAddTask(false);\n  }; // Add Task\n\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]); // const id = Math.floor(Math.random() * 10000) + 1\n    // const newTask = { id, ...task }\n    // setTasks([...tasks, newTask])\n  }; // delete enteries on the ui\n\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; // Set the reminder to true or false\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updatedTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updatedTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onClick: onClick,\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this) : 'No tasks to show', /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/gich/React/my-app/src/task-tracker/src/App.js"],"names":["useState","useEffect","Footer","Header","Tasks","AddTask","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","taskFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","onClick","addTask","task","method","headers","body","JSON","stringify","deleteTask","filter","toggleReminder","taskToToggle","updatedTask","reminder","map","length"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\n\n\nconst App = () => {\n  const [showAddTask, setShowAddTask] = useState(false)\n  const [tasks, setTasks] = useState([]) \n      \n  useEffect(() => {\n    const getTasks = async () => {\n      const taskFromServer = await fetchTasks()\n      setTasks(taskFromServer)\n     }\n     getTasks()\n  },\n   [])\n//Fetch tasks\nconst fetchTasks = async () =>{\n  const res = await fetch('http://localhost:5000/tasks')\n  const data =  await res.json()\n\n  return data\n}\n\n//Fetch tasks\nconst fetchTask = async (id) =>{\n  const res = await fetch(`http://localhost:5000/tasks/${id}`)\n  const data =  await res.json()\n\n  return data\n}\n\n  //Display the add form\n  const onClick = ()=>{\n    !showAddTask ?  setShowAddTask(true) : setShowAddTask(false)\n\n  }\n\n  // Add Task\n  const addTask = async (task) => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(task),\n    })\n\n    const data = await res.json()\n\n    setTasks([...tasks, data])\n\n    // const id = Math.floor(Math.random() * 10000) + 1\n    // const newTask = { id, ...task }\n    // setTasks([...tasks, newTask])\n  }\n  // delete enteries on the ui\n  const deleteTask = async (id)=>{\n    await fetch(`http://localhost:5000/tasks/${id}`,\n    {method : 'DELETE',})\n    setTasks(tasks.filter((task)=> task.id !==id))\n  }\n\n  // Set the reminder to true or false\n  const toggleReminder = async (id) =>{\n    const taskToToggle = await fetchTask(id)\n    const updatedTask = {...taskToToggle, reminder:!taskToToggle.reminder}\n\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(updatedTask),\n    })\n\n    const data = await res.json()\n    setTasks(\n    tasks.map((task) => \n    task.id === id ? {...task, reminder:data.reminder} \n    : task)\n    )\n  }\n  \n\n  return (\n    <div className=\"container\">\n      <Header onClick = {onClick} showAdd = {showAddTask}/>\n      {showAddTask && <AddTask onAdd = {addTask}/>}\n      {tasks.length > 0 ? (\n      <Tasks tasks={tasks}\n             onDelete = {deleteTask}\n             onToggle = {toggleReminder}/>)\n       : ('No tasks to show')\n      }\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App\n\n"]},"metadata":{},"sourceType":"module"}